"""Copyright (c) 2017 Megan "Zowayix" LeetPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.This is just a crappy thing to be run under MacPython on OS 9 (and probably other Mac OS Classicversions that MacPython runs on) that asks the user for a file, and dumps all of the resource forkof that file into a folder containing subfolders that organize everything by resource typeThe dumps are purely data fork, so they might only be useful to you if you know what the resourcetypes do and how they're structured, or if they're a normal file stuffed into a resource"""import macfsimport osimport sysfrom Carbon.Res import *#FSpOpenResFile constantsREAD = 1WRITE = 2def write_madh(res, output_path):	output = open(output_path, 'wb')	output.write(res.data)	output.close()		#Change the creator to PlayerPRO because it can just open this one	output_spec = macfs.FSSpec(output_path)	output_spec.SetCreatorType('SNPL', 'MADH')	#Custom handlers for certain resource types, so we can dump them a specific way, which might make#them actually usefulhandlers = {}handlers['MADH'] = write_madhdef dump_resource(res, res_type, res_index, output_folder):	#2nd item in tuple is resource type which we already have	res_id, _junk, res_name = res.GetResInfo()	print '    Resource %d: id = %d, name = %s' % (res_index, res_id, res_name)	print '    size = %d' % res.size	print '    Size on disk: %d' % res.GetResourceSizeOnDisk()	#print '    data: %s' % res.data	if len(res_name) > 0:		res_filename = '%d - %s' % (res_id, res_name.replace(':', '_'))	else:		res_filename = str(res_id)		#I guess filenames can only be 31 chars? *shrug*	res_filename = res_filename[:31]		output_path = os.path.join(output_folder, res_filename)	try:		if res_type in handlers:			handlers[res_type](res, output_path)		else:			output = open(output_path, 'wb')			output.write(res.data)			output.close()						#Change the file type to make things easier			output_spec = macfs.FSSpec(output_path)			output_spec.SetCreatorType('????', res_type)			except:		print 'WTF WHY I HATE YOU %s' % res_filename		res.DetachResource()def dump_type(res_type, base_folder):	#TODO Can a resource type have a : in the name? Because this would break if it did	type_folder = os.path.join(base_folder, res_type)	if not os.path.exists(type_folder):		os.mkdir(type_folder)		res_count = Count1Resources(res_type)	print '  There are %d resources of this type' % res_count		for res_index in range(1, res_count + 1):		res = Get1IndResource(res_type, res_index)		res.LoadResource()				dump_resource(res, res_type, res_index, type_folder)def dump_all_types(base_folder):	#There is no resource file parameter here because the	#Resource Manager API just operates on the concept of a single	#current file. This of course would not be thread-safe, but we are	#in the late 90s where threading has barely even been invented	type_count = Count1Types()	print 'There are %d types here' % type_count		#Get1IndType etc is 1-indexed	for type_index in range(1, type_count + 1):				res_type = Get1IndType(type_index)		print '  Type %d: %s' % (type_index, res_type)		dump_type(res_type, base_folder)def main():	filespec, ok = macfs.StandardGetFile()	if not ok:		sys.exit(0)	print 'File: %s' % filespec.as_pathname()	print filespec.GetCreatorType()		filename = filespec.as_tuple()[2]	#We are limited to 31 characters here and I don't know why	base_folder = ('%s Dumped Resources' % filename)[:31]	if not os.path.exists(base_folder):		os.mkdir(base_folder)		#TODO Need to do some error handling here for files with no resource fork	res_file = FSpOpenResFile(filespec, READ)		dump_all_types(base_folder)					CloseResFile(res_file)	main()